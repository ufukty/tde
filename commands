#!/usr/bin/env bash -i

PS4='\033[36m@echo\033[0m \033[35m${BASH_SOURCE}:${LINENO}\033[0m: \033[34m${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[0m'
set -o xtrace

cd "$WORKSPACE"

# MARK: Compile

version() {
    echo "$(date -u +%y%m%d-%H%M%S)-$(git rev-parse HEAD | cut -b 1-8)"
}

build() {
    PROGRAM_NAMES="$@"
    test -z "$PROGRAM_NAMES" && PROGRAM_NAMES="$(find application/cmd -name 'main.go' | cut -d '/' -f 3 | sort | uniq)"
    (
        cd application
        VERSION="$(version)" && mkdir -p build/$VERSION/{darwin,linux}
        for PROGRAM_NAME in $PROGRAM_NAMES; do
            env GOOS=darwin GOARCH=amd64 go build -o "build/$VERSION/darwin/$PROGRAM_NAME" ./cmd/$PROGRAM_NAME
            env GOOS=linux GOARCH=amd64 go build -o "build/$VERSION/linux/$PROGRAM_NAME" ./cmd/$PROGRAM_NAME
        done
    )
}

last-build() {
    PROGRAM_NAME="$1" && shift
    if test -z "$PROGRAM_NAME"; then
        find application/build -type d -maxdepth 3 -mindepth 2 | sort | tail -n 1 | cut -f 3 -d '/'
    else
        find application/build -name "*$PROGRAM_NAME*" | sort | tail -n 1 | cut -f 3 -d '/'
    fi
}

path-last-build() {
    PROGRAM_NAME="$1" && shift
    ARCH="${1:-"darwin"}" && shift
    PROGRAM_LAST_BUILD="$(last-build $PROGRAM_NAME)"
    echo "application/build/$PROGRAM_LAST_BUILD/$ARCH/$PROGRAM_NAME"
}

clean-build() {
    rm -rf application/build
}

# MARK: Run

run() {
    PROGRAM_NAME="$1" && shift
    (
        cd application
        go run "tde/cmd/$PROGRAM_NAME" --config="platform/local/config.yml" "$@"
    )
}

run-last-build() {
    PROGRAM_NAME="$1" && shift
    PROGRAM_LAST_BUILD="$(last-build $PROGRAM_NAME)"
    "./application/build/$PROGRAM_LAST_BUILD/darwin/$PROGRAM_NAME" --config="platform/local/config.yml" "$@"
}

build-and-run() {
    PROGRAM_NAME="$1" && shift
    build "$PROGRAM_NAME"
    run-last-build "$PROGRAM_NAME" "$@"
}

# MARK: Re-Deployment (only binaries for one server kind)

redeploy() {
    PROGRAM_NAME="$1" && shift
    (cd platform/stage && ./commands stage-redeploy "$PROGRAM_NAME" "$@")
}

build-redeploy() {
    PROGRAM_NAME="$1" && shift
    build "$PROGRAM_NAME"
    redeploy "$PROGRAM_NAME"
}

# MARK: API

api-summary() {
    cat api.http | grep HTTP/1.1 |
        cut -d ' ' -f 1-2 | awk '{ print $2, $1 }' |
        sort | awk '{ print $2, "\t", $1 }' |
        sed -E 's/(.*){{api}}(.*)/\1 \2/'
}

api-update() {
    API_GATEWAY_IP_ADDRESS="$(cat platform/stage/artifacts/deployment/service_discovery.json | jq -r '.digitalocean.fra1.services["api-gateway"][0].ipv4_address')"
    gsed --in-place "s;^@api.*;@api = http://${API_GATEWAY_IP_ADDRESS}:8080/api/v1.0.0;" application/api.http
}

ip-of() {
    PROGRAM_NAME="$1"
    cat platform/stage/deployment/service_discovery.json | jq -r ".[\"$PROGRAM_NAME\"].digitalocean[0].ipv4_address"
}

# MARK: main

SUBCOMMAND="$1" && shift && "$SUBCOMMAND" "$@"
