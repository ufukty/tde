package astcfg

import "go/ast"

var NodeConstructors = map[NodeType]func() ast.Node{
	BasicLit:       func() ast.Node { return &ast.BasicLit{} },
	BadExpr:        func() ast.Node { return &ast.BadExpr{} },
	Comment:        func() ast.Node { return &ast.Comment{} },
	CommentGroup:   func() ast.Node { return &ast.CommentGroup{} },
	Ident:          func() ast.Node { return &ast.Ident{} },
	Field:          func() ast.Node { return &ast.Field{} },
	FieldList:      func() ast.Node { return &ast.FieldList{} },
	Ellipsis:       func() ast.Node { return &ast.Ellipsis{} },
	FuncLit:        func() ast.Node { return &ast.FuncLit{} },
	CompositeLit:   func() ast.Node { return &ast.CompositeLit{} },
	ParenExpr:      func() ast.Node { return &ast.ParenExpr{} },
	SelectorExpr:   func() ast.Node { return &ast.SelectorExpr{} },
	IndexExpr:      func() ast.Node { return &ast.IndexExpr{} },
	IndexListExpr:  func() ast.Node { return &ast.IndexListExpr{} },
	SliceExpr:      func() ast.Node { return &ast.SliceExpr{} },
	TypeAssertExpr: func() ast.Node { return &ast.TypeAssertExpr{} },
	CallExpr:       func() ast.Node { return &ast.CallExpr{} },
	StarExpr:       func() ast.Node { return &ast.StarExpr{} },
	UnaryExpr:      func() ast.Node { return &ast.UnaryExpr{} },
	BinaryExpr:     func() ast.Node { return &ast.BinaryExpr{} },
	KeyValueExpr:   func() ast.Node { return &ast.KeyValueExpr{} },
	ArrayType:      func() ast.Node { return &ast.ArrayType{} },
	StructType:     func() ast.Node { return &ast.StructType{} },
	FuncType:       func() ast.Node { return &ast.FuncType{} },
	InterfaceType:  func() ast.Node { return &ast.InterfaceType{} },
	MapType:        func() ast.Node { return &ast.MapType{} },
	ChanType:       func() ast.Node { return &ast.ChanType{} },
	BadStmt:        func() ast.Node { return &ast.BadStmt{} },
	DeclStmt:       func() ast.Node { return &ast.DeclStmt{} },
	EmptyStmt:      func() ast.Node { return &ast.EmptyStmt{} },
	LabeledStmt:    func() ast.Node { return &ast.LabeledStmt{} },
	ExprStmt:       func() ast.Node { return &ast.ExprStmt{} },
	SendStmt:       func() ast.Node { return &ast.SendStmt{} },
	IncDecStmt:     func() ast.Node { return &ast.IncDecStmt{} },
	AssignStmt:     func() ast.Node { return &ast.AssignStmt{} },
	GoStmt:         func() ast.Node { return &ast.GoStmt{} },
	DeferStmt:      func() ast.Node { return &ast.DeferStmt{} },
	ReturnStmt:     func() ast.Node { return &ast.ReturnStmt{} },
	BranchStmt:     func() ast.Node { return &ast.BranchStmt{} },
	BlockStmt:      func() ast.Node { return &ast.BlockStmt{} },
	IfStmt:         func() ast.Node { return &ast.IfStmt{} },
	CaseClause:     func() ast.Node { return &ast.CaseClause{} },
	SwitchStmt:     func() ast.Node { return &ast.SwitchStmt{} },
	TypeSwitchStmt: func() ast.Node { return &ast.TypeSwitchStmt{} },
	CommClause:     func() ast.Node { return &ast.CommClause{} },
	SelectStmt:     func() ast.Node { return &ast.SelectStmt{} },
	ForStmt:        func() ast.Node { return &ast.ForStmt{} },
	RangeStmt:      func() ast.Node { return &ast.RangeStmt{} },
	ImportSpec:     func() ast.Node { return &ast.ImportSpec{} },
	ValueSpec:      func() ast.Node { return &ast.ValueSpec{} },
	TypeSpec:       func() ast.Node { return &ast.TypeSpec{} },
	BadDecl:        func() ast.Node { return &ast.BadDecl{} },
	GenDecl:        func() ast.Node { return &ast.GenDecl{} },
	FuncDecl:       func() ast.Node { return &ast.FuncDecl{} },
	File:           func() ast.Node { return &ast.File{} },
	Package:        func() ast.Node { return &ast.Package{} },
}