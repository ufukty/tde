// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/evolver.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EvolverService_NewSession_FullMethodName = "/api.v1.EvolverService/NewSession"
)

// EvolverServiceClient is the client API for EvolverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvolverServiceClient interface {
	NewSession(ctx context.Context, in *EvolverServiceNewSessionRequest, opts ...grpc.CallOption) (*EvolverServiceNewSessionResponse, error)
}

type evolverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvolverServiceClient(cc grpc.ClientConnInterface) EvolverServiceClient {
	return &evolverServiceClient{cc}
}

func (c *evolverServiceClient) NewSession(ctx context.Context, in *EvolverServiceNewSessionRequest, opts ...grpc.CallOption) (*EvolverServiceNewSessionResponse, error) {
	out := new(EvolverServiceNewSessionResponse)
	err := c.cc.Invoke(ctx, EvolverService_NewSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvolverServiceServer is the server API for EvolverService service.
// All implementations must embed UnimplementedEvolverServiceServer
// for forward compatibility
type EvolverServiceServer interface {
	NewSession(context.Context, *EvolverServiceNewSessionRequest) (*EvolverServiceNewSessionResponse, error)
	mustEmbedUnimplementedEvolverServiceServer()
}

// UnimplementedEvolverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEvolverServiceServer struct {
}

func (UnimplementedEvolverServiceServer) NewSession(context.Context, *EvolverServiceNewSessionRequest) (*EvolverServiceNewSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedEvolverServiceServer) mustEmbedUnimplementedEvolverServiceServer() {}

// UnsafeEvolverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvolverServiceServer will
// result in compilation errors.
type UnsafeEvolverServiceServer interface {
	mustEmbedUnimplementedEvolverServiceServer()
}

func RegisterEvolverServiceServer(s grpc.ServiceRegistrar, srv EvolverServiceServer) {
	s.RegisterService(&EvolverService_ServiceDesc, srv)
}

func _EvolverService_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvolverServiceNewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvolverServiceServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvolverService_NewSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvolverServiceServer).NewSession(ctx, req.(*EvolverServiceNewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvolverService_ServiceDesc is the grpc.ServiceDesc for EvolverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvolverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.EvolverService",
	HandlerType: (*EvolverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSession",
			Handler:    _EvolverService_NewSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/evolver.proto",
}
