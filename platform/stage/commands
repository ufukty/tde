#!/usr/local/bin/bash

PS4='\033[35m@echo\033[0m \033[34m${BASH_SOURCE}:${LINENO}\033[0m: \033[33m${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[0m'
set -o xtrace

cd "$WORKSPACE/platform/stage"

artifacts-update-ssh-aggregation() {
    (cd artifacts && cat ssh.conf.d/* >ssh.conf)
}

up() {
    FOLDER="$1" && shift # application, vpn etc.
    test -z "$FOLDER" && error "FOLDER is required." && exit 1
    (cd "provisioning/$FOLDER" && terraform apply "$@" --var-file=../vars.tfvars)
    artifacts-update-ssh-aggregation
}

down() {
    FOLDER="$1" && shift # application, vpn etc.
    test -z "$FOLDER" && error "FOLDER is required." && exit 1
    (cd "provisioning/$FOLDER" && terraform destroy "$@" --var-file=../vars.tfvars)
    artifacts-update-ssh-aggregation
}

re() {
    down "$@" && up "$@"
}

deploy() {
    (cd "deployment" && ansible-playbook --forks="20" playbook.yml)
}

redeploy() {
    PROGRAM_NAME="$1" && shift
    test -z "$PROGRAM_NAME" && error "PROGRAM_NAME is required." && exit 1
    (cd "deployment" && ansible-playbook --forks="20" --limit="$PROGRAM_NAME" --tags="redeploy" playbook.yml)
}

all() {
    up vpc --auto-approve
    up vpn --auto-approve
    up application --auto-approve
    deploy
}

vpn-totp() {
    test -n "$(find artifacts/vpn -name '*totp*')" && (
        cd artifacts/vpn &&
            find . -name '*totp*' | xargs -n 1 cat | qr &&
            find . -name '*totp*' -delete
    )
}

vpn-connect() {
    REGION_SLUG="$1" && shift
    test -z "$REGION_SLUG" && error "REGION_SLUG is required." && exit 1

    sudo -v
    sudo openvpn "$WORKSPACE/platform/stage/artifacts/vpn/dth-do-$REGION_SLUG-provisioner.ovpn"
    # sleep 1 && sudo killall mDNSResponder{,Helper}
    sudo -k
}

COMMAND="$1" && shift && $COMMAND "$@"
