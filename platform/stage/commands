#!/usr/local/bin/bash

PS4="\033[36m$(realpath --relative-to="$(dirname "$WORKSPACE")" "$(pwd -P)")\033[32m/\$(basename \"\${BASH_SOURCE}\"):\${LINENO}\033[0m\033[33m\${FUNCNAME[0]:+/\${FUNCNAME[0]}():}\033[0m "
set -o xtrace

cd "$WORKSPACE/platform/stage"

artifacts-update-ssh-aggregation() {
    (cd artifacts && cat ssh.conf.d/* >ssh.conf)
}

up() {
    FOLDER="$1" && shift # application, vpn etc.
    test -z "$FOLDER" && error "FOLDER is required." && exit
    (cd "provisioning/$FOLDER" && terraform apply "$@" --var-file=../vars.tfvars || exit)
    artifacts-update-ssh-aggregation
}

down() {
    FOLDER="$1" && shift # application, vpn etc.
    test -z "$FOLDER" && error "FOLDER is required." && exit
    (cd "provisioning/$FOLDER" && terraform destroy "$@" --var-file=../vars.tfvars || exit)
    artifacts-update-ssh-aggregation
}

re() {
    down "$@" && up "$@"
}

deploy() {
    export PROGRAM_NAME="$1" && shift
    (
        cd "deployment"
        if test -z "$PROGRAM_NAME"; then
            ansible-playbook --forks="20" playbook.yml
        else
            ansible-playbook --forks="20" --limit="$PROGRAM_NAME" --tags="redeploy" playbook.yml
        fi
    )
}

all() {
    up vpc --auto-approve || exit
    up vpn --auto-approve || exit
    up application --auto-approve || exit
    ssh-key-update
    deploy
}

vpn-totp() {
    test -n "$(find artifacts/vpn -name '*totp*')" && (
        cd artifacts/vpn &&
            find . -name '*totp*' | xargs -n 1 cat | qr &&
            find . -name '*totp*' -delete
    )
}

vpn-connect() {
    REGION_SLUG="$1" && shift
    test -z "$REGION_SLUG" && error "REGION_SLUG is required." && exit

    sudo -v
    sudo openvpn "$WORKSPACE/platform/stage/artifacts/vpn/dth-do-$REGION_SLUG-provisioner.ovpn"
    # sleep 1 && sudo killall mDNSResponder{,Helper}
    sudo -k
}

ssh-key-update() {
    ADDRESSES="$(cat artifacts/deployment/service_discovery.json | jq -r '.digitalocean.fra1.services[] | .[] | .ipv4_address_private')"
    echo "$ADDRESSES" | while read ADDRESS; do
        ssh-keygen -R "$ADDRESS" >/dev/null 2>&1
        ssh-keyscan "$ADDRESS" >>~/.ssh/known_hosts 2>&1 &
    done
    wait $(jobs -p)
}

generate-ca() (
    cd "$WORKSPACE/platform/stage/secrets"
    easyrsa init-pki soft
    easyrsa --batch --req-cn="TDE-CA" build-ca nopass
)

generate-keys() (
    ssh-app-db() (
        mkdir -p "image/ssh-app-db" && cd "image/ssh-app-db"
        ssh-keygen -a 1000 -b 4096 -C "ssh-app-db" -o -t rsa -f app-db -N '' >/dev/null
    )
    tls-app-db() (
        easyrsa --batch build-server-full app-db nopass
    )
    mkdir -p "$WORKSPACE/platform/stage/secrets" && cd "$WORKSPACE/platform/stage/secrets"
    ssh-app-db
    tls-app-db
)

COMMAND="$1" && shift && $COMMAND "$@"
